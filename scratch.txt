# ------------------------------------------------------------------------------
# Endpoint check
# ------------------------------------------------------------------------------

# Curl command to test /auth route
# export TOKEN=`curl -d '{"email":"email@email.com","password":"test"}' -H "Content-Type: application/json" -X POST localhost:80/auth`

# Curl Command to test /contents route
# curl --request GET 'http://127.0.0.1:80/contents' -H "Authorization: Bearer ${TOKEN}"


# ------------------------------------------------------------------------------
# Docker commands
# ------------------------------------------------------------------------------
# Build the container
# docker build --tag jwt-api-test .

# Run the container
# docker run --env-file=env_file -p 80:8080 jwt-api-test
# pull up 'localhost' in browser

# Remove the container
# docker stop jwt-api-test
# docker remove jwt-api-test


# ------------------------------------------------------------------------------
# Debugging deploy issue
# ------------------------------------------------------------------------------
# course
  TRUST="{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::${ACCOUNT_ID}:root\" }, \"Action\": \"sts:AssumeRole\" } ] }"

  aws iam create-role --role-name UdacityFlaskDeployCBKubectlRole --assume-role-policy-document "$TRUST" --output text --query 'Role.Arn'



# stack overflow https://stackoverflow.com/questions/59171413/getting-unable-to-recognize-hello-k8s-yml-unauthorized-error-when
# -running

TRUST = "{   \"Version\": \"2012-10-17\",   \"Statement\": [     {       \"Effect\": \"Allow\",       \"Principal\": {         \"Service\": \"codebuild.amazonaws.com\"       },       \"Action\": \"sts:AssumeRole\"     }   ] }"

$ echo '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": "eks:Describe*", "Resource": "*" } ] }' > /tmp/iam-role-policy

aws iam create-role --role-name FSNDFlaskDeployCBKubectlRole --assume-role-policy-document "$TRUST" --output text --query 'Role.Arn'
aws iam put-role-policy --role-name FSNDFlaskDeployCBKubectlRole --policy-name eks-describe --policy-document file:///tmp/iam-role-policy
aws iam attach-role-policy --role-name FSNDFlaskDeployCBKubectlRole --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
aws iam attach-role-policy --role-name FSNDFlaskDeployCBKubectlRole --policy-arn arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess

# ------------------------------------------------------------------------------
# Flask Kubernettes Deploy steps from mentor (Isaiah)
# Tutorial: https://eksworkshop.com/intermediate/220_codepipeline/configmap/
# StackOverflow: https://stackoverflow.com/questions/59171413/getting-unable-to-recognize-hello-k8s-yml-unauthorized-error-when-running/59194875#59194875
# ------------------------------------------------------------------------------

# Create a Kubernettes EKS Cluster & check them
eksctl create cluster --name simple-jwt-api
kubectl get nodes

# Set ENV variables for role in CodeBuild
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
echo '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "eks:Describe*", "ssm:GetParameters" ], "Resource": "*" } ] }' > /tmp/iam-role-policy
TRUST="{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::${ACCOUNT_ID}:root\" }, \"Action\": \"sts:AssumeRole\" } ] }"

# Create role & apply policies
aws iam create-role --role-name CodeBuildKubectlRole --assume-role-policy-document "$TRUST" --output text --query 'Role.Arn'
aws iam put-role-policy --role-name CodeBuildKubectlRole --policy-name eks-describe --policy-document file:///tmp/iam-role-policy
aws iam attach-role-policy --role-name CodeBuildKubectlRole --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
aws iam attach-role-policy --role-name CodeBuildKubectlRole --policy-arn arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess

# Attach the role to the running instance
Follow instructions: https://eksworkshop.com/020_prerequisites/ec2instance/

# Create patch & open file for update
'''
ROLE="    - rolearn: arn:aws:iam::$ACCOUNT_ID:role/CodeBuildKubectlRole\n      username: build\n      groups:\n        - system:masters"
'''

kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"$ROLE\";next}1" > /tmp/aws-auth-patch.yml
code /tmp/aws-auth-patch.yml

# In the data/mapRoles section of this document add, replacing <ACCOUNT_ID> with your account id:
# Only do the following if you didn't use ROLE above, if you did you should see
this in the aws-auth-patch.yml file already

'''
  - rolearn: arn:aws:iam::<ACCOUNT_ID>:role/UdacityFlaskDeployCBKubectlRole
    username: build
    groups:
      - system:masters
'''


# Apply the patch
kubectl apply -f /tmp/aws-auth-patch.yml

OR

kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"

# Cleanup
kubectl delete deployments simple-jwt-api
kubectl delete services simple-jwt-api
